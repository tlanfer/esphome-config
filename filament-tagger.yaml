substitutions:
  id: filament-tagger
  friendly_name: Filament Tagger

packages:
  base: !include common/base.yaml
  device: !include common/devices/esp32c3.yaml

##### Sensors

globals:
  - id: ready_to_read
    type: bool
    initial_value: 'true'

i2c:
  sda: GPIO6
  scl: GPIO7
  scan: true

pn532_i2c:
  update_interval: 1000ms
  on_tag:
    then:
      - lambda: |-
          if( id(ready_to_read) == false ) {
            return;
          }
          id(ready_to_read) = false;
          id(rfid_tag).publish_state(x);
          if (!tag.has_ndef_message()) {
            ESP_LOGD("custom", "Tag without message");
            return;
          }
          auto message = tag.get_ndef_message();
          auto records = message->get_records();
          if(records.size() != 1) {
            ESP_LOGD("custom", "Wrong number of records: %d", records.size());
            return;
          }
          
          auto record = records[0];
          std::string payload = record->get_payload();
          
          if(payload.rfind("spool:", 0) == 0) {
              ESP_LOGD("custom", "Spool ID: %s", payload.substr(6).c_str());
              id(spool_id).publish_state(payload.substr(6));
          } else {
              ESP_LOGD("custom", "Unknown payload: %s", payload.c_str());
          }

http_request:
  verify_ssl: false
  timeout: 15s

text_sensor:
  - platform: template
    name: "RFID Tag"
    id: rfid_tag

  - platform: template
    name: "Spool ID"
    id: spool_id

    on_value:
      then:
        - script.execute: beep_success
        - http_request.post:
            url: "http://192.168.1.245/printer/gcode/script"
            headers:
              Content-Type: application/json
            json:
              script: !lambda |-
                return ((std::string) "MMU_GATE_MAP NEXT_SPOOLID="+x).c_str();
            on_response:
              then:
                - lambda: |-
                    id(ready_to_read) = true;
            on_error:
              then:
                - lambda: |-
                    id(ready_to_read) = true;

output:
  - platform: gpio
    pin: GPIO3
    id: buzzer

script:
  - id: beep_success
    then:
      - output.turn_on: buzzer
      - delay: 300ms
      - output.turn_off: buzzer